#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   https://www.haproxy.org/download/3.2/doc/configuration.txt
#   https://docs.haproxy.org/3.2/configuration.html
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    # daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    log stdout format raw daemon debug
    option                  httplog
    option                  logasap
    option                  dontlognull
    option http-server-close
#    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

#---------------------------------------------------------------------
# example how to define user and enable Data Plane API on tcp/5555
# more information: https://github.com/haproxytech/dataplaneapi and
#   https://www.haproxy.com/documentation/hapee/2-0r1/configuration/dataplaneapi/
#---------------------------------------------------------------------
# userlist haproxy-dataplaneapi
#     user admin insecure-password mypassword
#
# program api
#    command /usr/bin/dataplaneapi --host 0.0.0.0 --port 5555 --haproxy-bin /usr/sbin/haproxy --config-file /usr/local/etc/haproxy/haproxy.cfg --reload-cmd "kill -SIGUSR2 1" --restart-cmd "kill -SIGUSR2 1" --reload-delay 5 --userlist haproxy-dataplaneapi
#    no option start-on-reload

#---------------------------------------------------------------------
# Custom error pages
#---------------------------------------------------------------------

http-errors myerrors
  errorfile 404 /etc/haproxy/errorfiles/404.http

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
frontend  main
    bind *:80
    # bind *:443 ssl # To be completed ....

    acl is_raid_resolve path -m reg ^\/102?\.\d+(\..*)?\/.+$
    http-request redirect  code 301  location https://www.raid.org%[path]?%[query] unless is_raid_resolve
    use_backend doi          if is_raid_resolve
    default_backend             raidorg
    errorfiles                  myerrors
    http-response return  status 404  default-errorfiles  if { status 404 }

#---------------------------------------------------------------------
# Resolution backend 
#---------------------------------------------------------------------
backend doi
    http-request set-uri https://doi.org%[path]?%[query]
    server      doi doi.org

#---------------------------------------------------------------------
# raid.org pages backend 
#---------------------------------------------------------------------
backend raidorg
    http-request set-uri https://raid.org%[path]?%[query]
    server      raidorg raid.org
